/* eslint-disable class-methods-use-this */

import {
  BaseCommand,
  CommandVerifyContext,
  CommandExecuteContext,
  VerificationResult,
  VerifyStatus,
} from 'lisk-sdk';
import { ProfileStore } from '../stores/profile';
import { setAttributesCommandParamsSchema } from '../schemas';
import { SetAttributesCommandParams, Profile } from '../types';
import { verifyHash } from '../../../utils';

export class SetAttributesCommand extends BaseCommand {
  public schema = setAttributesCommandParamsSchema;

  // eslint-disable-next-line @typescript-eslint/require-await
  public async verify(context: CommandVerifyContext<SetAttributesCommandParams>): Promise<VerificationResult> {
    const { params, transaction } = context;
    // The name and nick name should not be the same
    if (params.name === params.nickName) {
      return {
        status: VerifyStatus.FAIL,
        error: new Error('The name and nick name should not be the same'),
      };
    }
    // Validate the signature of the avatar hash
    const isAvatarHashGenuine = verifyHash(params.avatarSignature, params.avatarHash, transaction.senderPublicKey);
    if (!isAvatarHashGenuine) {
      return {
        status: VerifyStatus.FAIL,
        error: new Error('The avatar signature is not generated by the sender'),
      };
    }
    // Validate the signature of the banner hash
    const isBannerHashGenuine = verifyHash(params.bannerSignature, params.bannerHash, transaction.senderPublicKey);
    if (!isBannerHashGenuine) {
      return {
        status: VerifyStatus.FAIL,
        error: new Error('The banner signature is not generated by the sender'),
      };
    }
    return { status: VerifyStatus.OK };
  }

  public async execute(context: CommandExecuteContext<SetAttributesCommandParams>): Promise<void> {
    const { params, transaction } = context;
    // Get namehash output of the profile file

    const profileSubStore = this.stores.get(ProfileStore);

    // // Check uniqueness of the Profile
    // const profileExists = await profileSubStore.has(context, params.profileID);
    // if (!profileExists) {
    //   throw new Error('Profile with this ID does not exist.');
    // }

    const profile: Profile = await profileSubStore.get(context, params.profileID);

    // Check if the sender owns the profile
    if (!profile.creatorAddress.equals(transaction.senderAddress)) {
      throw new Error('You cannot update an profile that you do not own.');
    }

    // Create the Profile object and save it on the blockchain
    const updatedObject: Profile = {
      ...params,
      creatorAddress: profile.creatorAddress,
    };
    await profileSubStore.set(context, params.profileID, updatedObject);
  }
}
